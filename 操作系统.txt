操作系统

# 图灵计算机模型，冯诺依曼模型

CPU位数的区别：在于一次能计算多少字节数据
32位：计算4个字节
64位：计算8个字节

寄存器：
通用寄存器：用来存放需要进行运算的数据
程序计数器：用来存储CPU要执行下一条指令的【所在内存地址】
指令寄存器：用来存放程序计数器指向的指令，也就是指令本身

总线： 用来通信
地址总线：用来指定CPU将要操作的内存地址
数据总线：用于读写内存数据
控制总线：用于发送和接收信号：中断，设备复位等信号
CPU读写内存数据：1、通过【地址总线】指定所需要读取数据内存地址。2、通过【数据总线】读取内存数据

线路的位宽与CPU的位宽
线路的位宽 即并行传输中总线的条数
CPU位宽： 最好不小于线路位宽 -> 32位CPU最好和32位位宽的线路搭配
（1、当计算数额不超过32位数字的情况下，32位和64位区别不大。 2、32位CPU最大只能操作4GB内存，64位就是2^64）
硬件的位数值得是【CPU的位宽】，而软件的位数指的是【指令的位宽】


冯诺依曼计算机执行过程：
CPU会根据程序计数器里面的内存地址，将内存中需要执行的指令放到【指令寄存器】中执行，然后根据指令长度使内存地址自增，然后接着读取。

CPU的指令周期：
1、CPU通过【程序计数器】取得对应内存地址的指令。 【Fetch（取得指令）】
2、CPU对指令进行解码。 【Decode（指令译码）】
3、CPU执行指令。 【Execution（执行指令）】
4、CPU将计算结果存回寄存器或者将寄存器的值存回内存 【Store（数据回写）】


程序的CPU执行时间 = CPU时钟周期数 * 时钟周期时间

CPU时钟周期数 = 指令数 * CPI（每条指令的平均时钟周期数）

时钟周期：每次脉冲信号高低电平的转换 【注意：一个时钟周期<不一定>能执行一条指令】
时钟周期时间：CPU主频 eg：2.4Ghz 四核 Intel Core i7  时钟周期时间: 1/2.4G



# 存储设备

CPU: 寄存器，L1 Cache，L2 Cache，L3 Cache（SRAM 静态随机存储器）
内存 （DRAM 动态随机存储存储器）
SSD/HHD 硬盘

存储器的层次结构（有个很好的图书馆例子）：
	寄存器 -> 大脑正在思考的东西
	L1 Cache -> 中短期记忆 （数据缓存和指令缓存）
	L2 Cache/L3 Cache -> 长期记忆
	内存 -> 书桌上的书（常用）
	SSD/HHD 硬盘 -> 图书馆中存放的书（不常用）
其中L3为多核共享的，而L1、L2是单核独享的

# CPU Cache的访问
一个内存的地址：组标记 + 索引 + 偏移量
CPU Cache里的数据结构：索引 + 有效位 + 组标记 +数据块
1、先通过索引确定是哪一组（通过取模来划分组）
2、判断有效位
3、通过组标记判断在组中的位置
4、根据偏移量搜索到数据（偏移量产生的原因是因为有【索引块、有效位快、组标记】）
通过改变【缓冲命中率】来提高代码运行速度，即保证【一次操作完成后，后续的操作的数据都被导入到Cache中】

多核系统中，因为L1和L2是每个核心独有的，所以要提高代码的运行速度，可以考虑将进程绑定到一个核心上执行
Linux中的指令：int sched_staffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);




















